I"†X<p>Tutorials are great for seeing examples of code and new programming concepts in action. They show you the solution and walk you through the steps to make it work. However, they typically don‚Äôt demonstrate the problem solving process that goes into developing the answer in the first place. Writing code ‚Äúfrom scratch‚Äù requires a set of problem solving skills that tutorials don‚Äôt teach. Developers need to see concepts demonstrated, but they also need to learn and practice the process for developing a script on their own. Here is the creative problem solving process I use when programming to come up with solutions when I have to come up with a solution on my own.</p>

<h2 id="1-write-down-clearly-what-the-code-should-do">1. Write down clearly what the code should do</h2>

<p>This step might seem obvious, but clearly stating the goal and being able to reference it as you work makes it easier to focus and makes sure you‚Äôre completely clear on what the goal is.</p>

<p>In this example, we‚Äôre going to write a script that compares a list of words and determines the longest one.</p>

<h2 id="1-sketch-it-out--on-paper-and-in-pseudocode">1. Sketch it out ‚Äì on paper and in pseudocode</h2>

<p>It‚Äôs tempting to jump right into the code and try to start writing. And if you‚Äôre an experienced developer, the problem is simple, or you‚Äôve solved a similar problem before, you can probably just go ahead and write out the script. If you don‚Äôt have a lot of experience yet or the problem is very complex, it‚Äôs helpful to sketch out the logic first before trying to write any code.</p>

<p>Thinking through the logic and trying to translate it into the right syntax at the same time is hard ‚Äì it requires the brain to do too many things at once so it freezes up. So do one thing at a time. Think through the order and logic of the instructions first, then translate it into code in the next step.</p>

<p>Here‚Äôs a couple ways to do sketch a script. One way is to write down the steps logically with <strong>pseudocode</strong>. Pseudocode is instructions written in plain English (or whatever your primary language is) that roughly resemble the logical order of steps a computer would take.</p>

<p>In our example, it might look like this:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Goal: Write a script that compares a list of words and determines the longest one</span>
<span class="c1">// Store a list of words</span>
<span class="c1">// Compare the length of the first word and the length of the second word</span>
<span class="c1">// If the first word is longer, store it as the longest word, otherwise if the second word is longer, store it as the longest word</span>
<span class="c1">// Compare the next word to the longest word</span>
<span class="c1">// If the next word is longer, store it as the longest word</span>
<span class="c1">// Repeat until all words have been compared</span>
<span class="c1">// Return the longest word</span></code></pre></figure>

<p>The other option is to sketch out the instructions visually in a flow chart. You can do this in a sketchbook or on the computer. Here‚Äôs an example of how that might look:</p>

<p><img src="/img/script-sketch.png" alt="Script Sketch" /></p>

<p>The logic may not be completely correct after you write it out or sketch it out, and you may not know exactly how to write this in actual code, but that‚Äôs okay. You have enough to get started on the next step, and you can come back to this step later if there‚Äôs an issue with the logic.</p>

<h2 id="2-translate-each-step-into-code-one-line-at-a-time">2. Translate each step into code one line at a time</h2>

<p>Before beginning this step, the most important thing to keep in mind is that the code you‚Äôre writing doesn‚Äôt have to be perfect the first time. It‚Äôs important to just get one tiny piece of the overall functionality working so you can get some feedback and make some progress. Even if it will have to be adjusted later, each step results in feedback and a few pieces of code you can use moving forward.</p>

<p>Using your pseudocode, break it down into tiny, tiny pieces that you can tackle individually and do them one at a time. If you don‚Äôt know how exactly to write something in the correct syntax, this is a good time to do some research and look it up.</p>

<p>In the next example, we‚Äôre taking the pseudocode from the previous example and translating one line to store the list of words:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Goal: Write a script that compares a list of words and determines the longest one</span>
<span class="c1">// Store a list of words</span>
<span class="kd">var</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">applesauce</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">];</span>
<span class="c1">// Store the current longest word, which is nothing at first</span>
<span class="c1">// Loop through the words and compare the length of each to the length of the current longest word</span>
<span class="c1">// If the compared word is longer, store it as the current longest word</span>
<span class="c1">// Otherwise move on to the next word</span>
<span class="c1">// Repeat until all words have been compared</span>
<span class="c1">// Return the longest word</span></code></pre></figure>

<p>Already at this point you may realize errors in your logic that can be improved, and I made some edits to the pseudocode above to make it more clear.</p>

<p>I‚Äôll translate a few more steps now:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Goal: Write a script that compares a list of words and determines the longest one</span>
<span class="c1">// Store a list of words</span>
<span class="kd">var</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">applesauce</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">];</span>
<span class="c1">// Store the current longest word, which is nothing at first</span>
<span class="kd">var</span> <span class="nx">longestWord</span><span class="p">;</span>
<span class="c1">// Loop through the words and compare the length of each to the length of the current longest word</span>
<span class="c1">// If the compared word is longer, store it as the current longest word</span>
<span class="c1">// Otherwise move on to the next word</span>
<span class="c1">// Repeat until all words have been compared</span>
<span class="c1">// Return the longest word</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">longestWord</span><span class="p">);</span></code></pre></figure>

<p>Notice how you don‚Äôt need to translate the steps in order. Often it‚Äôs helpful to start at the beginning (the input and output) and work toward the middle. Let‚Äôs do a few more:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Goal: Write a script that compares a list of words and determines the longest one</span>
<span class="c1">// Store a list of words</span>
<span class="kd">var</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">applesauce</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">];</span>
<span class="c1">// Store the current longest word, which is nothing at first</span>
<span class="kd">var</span> <span class="nx">longestWord</span><span class="p">;</span>
<span class="c1">// Loop through the words</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">words</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
  <span class="c1">// Compare the length of each to the length of the current longest word</span>
  <span class="c1">// If the compared word is longer, store it as the current longest word</span>
  <span class="c1">// Otherwise move on to the next word</span>
  <span class="c1">// Repeat until all words have been compared</span>
<span class="p">}</span>
<span class="c1">// Return the longest word</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">longestWord</span><span class="p">);</span></code></pre></figure>

<p>Notice how I‚Äôm using a <code class="highlighter-rouge">console.log</code> just to make sure the loop is working before I even try to do the next step of comparing the words. Sometimes lines of pseudocode need to be broken down into even smaller steps.</p>

<p>Testing along the way makes debugging much easier down the road. If you try to write the whole script and then it doesn‚Äôt work, you might have no idea where in the script the issue is. If you test along the way, you can move forward with confidence that what you‚Äôve written so far is working. When it comes to debugging, knowledge is power. The more you test, the more you know about how your script is working.</p>

<p>Continuing on:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Goal: Write a script that compares a list of words and determines the longest one</span>
<span class="c1">// Store a list of words</span>
<span class="kd">var</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">applesauce</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">];</span>
<span class="c1">// Store the current longest word, which is nothing at first</span>
<span class="kd">var</span> <span class="nx">longestWord</span><span class="p">;</span>
<span class="c1">// Loop through the words</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">words</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">longestWord</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">longestWord</span> <span class="o">=</span> <span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="c1">// Compare the length of each to the length of the current longest word</span>
  <span class="c1">// If the compared word is longer, store it as the current longest word</span>
  <span class="c1">// Otherwise move on to the next word</span>
  <span class="c1">// Repeat until all words have been compared</span>
<span class="p">}</span>
<span class="c1">// Return the longest word</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">longestWord</span><span class="p">);</span></code></pre></figure>

<p>Now we‚Äôre comparing the length of each word to the length of <code class="highlighter-rouge">longestWord</code>. However, if you run this script, you‚Äôll get an error! We‚Äôre trying to compare the length of a word to an undefined variable, <code class="highlighter-rouge">longestWord</code>. Since it‚Äôs undefined, it doesn‚Äôt have a length. Let‚Äôs fix that:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Goal: Write a script that compares a list of words and determines the longest one</span>
<span class="c1">// Store a list of words</span>
<span class="kd">var</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">applesauce</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">];</span>
<span class="c1">// Store the current longest word, which is nothing at first</span>
<span class="kd">var</span> <span class="nx">longestWord</span><span class="p">;</span>
<span class="c1">// Loop through the words</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">words</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// If there is already a word stored as the longest word</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">longestWord</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Longest word exists already</span><span class="dl">"</span><span class="p">);</span>
      <span class="c1">// Compare the length of the current word to the length of the current longest word</span>
      <span class="c1">// If the current word is longer, store it as the current longest word</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">longestWord</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">longestWord</span> <span class="o">=</span> <span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="p">}</span>
  <span class="c1">// Otherwise, store the first word as the longest word</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">No longest word exists, save the first word</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">longestWord</span> <span class="o">=</span> <span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="c1">// Otherwise move on to the next word</span>
  <span class="c1">// Repeat until all words have been compared</span>
<span class="p">}</span>
<span class="c1">// Return the longest word</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">longestWord</span><span class="p">);</span></code></pre></figure>

<p>Here we‚Äôre checking to see if a word has already been stored as the longest word. If it has, then we compare the current word in the loop to it and determine which is longer. If it hasn‚Äôt, we store the first word in the loop as the longest word.</p>

<p>Getting stuck like this happens in the middle of writing almost every script. <strong>Expect to go back and revise your pseudocode and do more research to solve problems you get stuck on in the middle.</strong> Using <code class="highlighter-rouge">console.log</code> to test each step along the way is a great way to see what‚Äôs going on with the data as the script runs and solve problems. The best way to solve a problem is to see what the computer is thinking, and the best way to do that is to look at the logs and errors!</p>

<p>That completes the rough draft of our script! It‚Äôs looping through the list of words and at the end we see the longest one logged to the console.</p>

<h2 id="4-iterate">4. Iterate</h2>

<p>After you have the basic functionality working, you can work on refactoring and improving the code and making it more flexible and reusable. For this example, we‚Äôre going to refactor it to be a function that we can reuse with any set of words:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Goal: Write a script that compares a list of words and determines the longest one</span>
<span class="kd">var</span> <span class="nx">findLongestWord</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">words</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">longestWord</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">words</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">longestWord</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">longestWord</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">longestWord</span> <span class="o">=</span> <span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">longestWord</span> <span class="o">=</span> <span class="nx">words</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">longestWord</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">words</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">banana</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">applesauce</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">longestWord</span> <span class="o">=</span> <span class="nx">findLongestWord</span><span class="p">(</span><span class="nx">words</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">longestWord</span><span class="p">);</span></code></pre></figure>

<p>This process often requires more jumping back and forth between pseudocode and translating into code. It also requires more testing with <code class="highlighter-rouge">console.log</code> along the way, making sure that each step works.</p>

<h2 id="rough-drafts-are-specific-final-drafts-are-modular">Rough drafts are specific, final drafts are modular</h2>

<p>When you go through this process, usually the code moves from specific, inflexible versions to more flexible and abstract code. Specific means that it can only be used to do one thing or in one situation, and abstract means it‚Äôs reusable and able to be used in multiple situations. In this example, we made the code work for one specific set of data, then made it an abstract reusable function.</p>

<p>This is part of the sketching process when writing code‚Äîdon‚Äôt expect it to be perfectly modular right away. Get it working in any way you can even if it‚Äôs imperfect, then go back and improve it once you‚Äôve made some progress. The thing to avoid is making no progress for a long time because being stuck will eventually completely erode your motivation. It‚Äôs a lot more fun to solve problems one step at a time than be overwhelmed by the whole mountain.</p>

<p>This process doesn‚Äôt have to be followed every time‚Äìas you gain experience you become more fluent in writing code so you don‚Äôt need as many steps and you can skip ahead. However, even experienced developers run into complex problems and need to step back and go through a process similar to this one to find a solution.</p>

<p>Questions, comment, ideas? Let‚Äôs talk on <a href="http://twitter.com/kev_mcg">Twitter</a>!</p>
:ET